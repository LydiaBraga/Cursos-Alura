{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","event","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACH;;;;oDAEsB;AACnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,UAACC,KAAD,EAAW;AACrCV,kDAAkBW,aAAlB,CAAgCD,MAAME,MAAN,CAAaC,MAA7C;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,UAACJ,KAAD,EAAW;AAC/B,oCAAI,CAACZ,UAAL,EAAiB;AACbA,iDAAaY,MAAME,MAAN,CAAaC,MAA1B;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAW;AAC1B,8CAAM,IAAIE,KAAJ,CAAU,+CAAV,CAAN;AACH,qCAFD;AAGH;;AAEDE,wCAAQL,UAAR;AACH,6BAVD;;AAYAO,wCAAYW,OAAZ,GAAsB,UAACN,KAAD,EAAW;AAC7BO,wCAAQC,GAAR,CAAYR,MAAME,MAAN,CAAaO,KAAzB;AACAf,uCAAOM,MAAME,MAAN,CAAaO,KAAb,CAAmBC,IAA1B;AACH,6BAHD;AAIH,yBAvBM,CAAP;AAwBH;;;sDAEwB;AACrB,4BAAItB,UAAJ,EAAgB;AACZC;AACAA,oCAAQ,IAAR;AACAD,yCAAa,IAAb;AACH;AACJ;;;kDAEoBA,U,EAAY;AAC7BH,+BAAO0B,OAAP,CAAe,UAACC,KAAD,EAAW;AACtB,gCAAIxB,WAAWyB,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EAAiD;AAC7CxB,2CAAW2B,iBAAX,CAA6BH,KAA7B;AACH;AACDxB,uCAAW4B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAACK,eAAe,IAAhB,EAApC;AACH,yBALD;AAMH","file":"ConnectionFactory.js","sourcesContent":["const stores = [\"negociacoes\"];\r\nconst version = 2;\r\nconst dbName = \"aluraframe\";\r\n\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n\r\n    constructor() {\r\n        throw new Error(\"Não é possível criar instâncias de ConnectionFactory!\");\r\n    }\r\n\r\n    static getConnection() {\r\n        return new Promise((resolve, reject) => {\r\n            var openRequest = window.indexedDB.open(dbName, version);\r\n\r\n            openRequest.onupgradeneeded = (event) => {\r\n                ConnectionFactory._createStores(event.target.result);\r\n            };\r\n    \r\n            openRequest.onsuccess = (event) => {\r\n                if (!connection) {\r\n                    connection = event.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = function() {\r\n                        throw new Error(\"Você não pode fechar uma conexão diretamente!\");\r\n                    }\r\n                }\r\n\r\n                resolve(connection);\r\n            };\r\n    \r\n            openRequest.onerror = (event) => {\r\n                console.log(event.target.error);\r\n                reject(event.target.error.name);\r\n            };\r\n        });\r\n    }\r\n\r\n    static closeConnection() {\r\n        if (connection) {\r\n            close();\r\n            close = null;\r\n            connection = null;\r\n        }\r\n    };\r\n\r\n    static _createStores(connection) {\r\n        stores.forEach((store) => {\r\n            if (connection.objectStoreNames.contains(store)) {\r\n                connection.deleteObjectStore(store);\r\n            }\r\n            connection.createObjectStore(store, {autoIncrement: true});\r\n        });\r\n    }\r\n}"]}